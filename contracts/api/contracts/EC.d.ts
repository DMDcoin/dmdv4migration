/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class EC extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): EC;
  methods: {
    a(): TransactionObject<string>;

    b(): TransactionObject<string>;

    gx(): TransactionObject<string>;

    gy(): TransactionObject<string>;

    n(): TransactionObject<string>;

    ecadd(
      x1: number | string,
      y1: number | string,
      x2: number | string,
      y2: number | string
    ): TransactionObject<{
      x3: string;
      y3: string;
      0: string;
      1: string;
    }>;

    ecmul(
      x1: number | string,
      y1: number | string,
      scalar: number | string
    ): TransactionObject<{
      x2: string;
      y2: string;
      0: string;
      1: string;
    }>;

    ecmulVerify(
      x1: number | string,
      y1: number | string,
      scalar: number | string,
      qx: number | string,
      qy: number | string
    ): TransactionObject<boolean>;

    publicKey(
      privKey: number | string
    ): TransactionObject<{
      qx: string;
      qy: string;
      0: string;
      1: string;
    }>;

    publicKeyVerify(
      privKey: number | string,
      x: number | string,
      y: number | string
    ): TransactionObject<boolean>;

    deriveKey(
      privKey: number | string,
      pubX: number | string,
      pubY: number | string
    ): TransactionObject<{
      qx: string;
      qy: string;
      0: string;
      1: string;
    }>;
  };
  events: {
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
