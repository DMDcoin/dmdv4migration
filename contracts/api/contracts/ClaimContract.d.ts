/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Claim = ContractEventLog<{
  _from: string;
  _to: string;
  amount: string;
  _nominator: string;
  _denominator: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;

export interface ClaimContract extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ClaimContract;
  clone(): ClaimContract;
  methods: {
    balances(arg0: string | number[]): NonPayableTransactionObject<string>;

    deploymentTimestamp(): NonPayableTransactionObject<string>;

    dilution_s1_75_executed(): NonPayableTransactionObject<boolean>;

    dilution_s2_50_executed(): NonPayableTransactionObject<boolean>;

    dilution_s3_0_executed(): NonPayableTransactionObject<boolean>;

    lateClaimBeneficorAddressDAO(): NonPayableTransactionObject<string>;

    lateClaimBeneficorAddressReinsertPot(): NonPayableTransactionObject<string>;

    prefixStr(): NonPayableTransactionObject<string>;

    fill(
      _accounts: (string | number[])[],
      _balances: (number | string)[]
    ): TransactionObject<void>;

    getPublicKeyFromBitcoinSignature(
      hashValue: string | number[],
      r: string | number[],
      s: string | number[],
      v: number | string | BN
    ): NonPayableTransactionObject<string>;

    /**
     * returns the essential part of a Bitcoin-style address associated with an ECDSA public key
     * @param _addressType Whether DMD is Legacy or Segwit address and if it was compressed
     * @param _publicKeyX X coordinate of the ECDSA public key
     * @param _publicKeyY Y coordinate of the ECDSA public key
     */
    publicKeyToBitcoinAddress(
      _publicKeyX: string | number[],
      _publicKeyY: string | number[],
      _addressType: number | string | BN
    ): NonPayableTransactionObject<string>;

    /**
     * Convert an uncompressed ECDSA public key into an Ethereum address
     * @param _publicKeyX X parameter of uncompressed ECDSA public key
     * @param _publicKeyY Y parameter of uncompressed ECDSA public key
     */
    publicKeyToEthereumAddress(
      _publicKeyX: string | number[],
      _publicKeyY: string | number[]
    ): NonPayableTransactionObject<string>;

    /**
     * PUBLIC FACING: Derive an Ethereum address from an ECDSA public key
     * @param pubKeyX First  half of uncompressed ECDSA public key
     * @param pubKeyY Second half of uncompressed ECDSA public key
     */
    pubKeyToEthAddress(
      pubKeyX: string | number[],
      pubKeyY: string | number[]
    ): NonPayableTransactionObject<string>;

    /**
     * sha256(sha256(data))
     * @param data Data to be hashed
     */
    calcHash256(data: string | number[]): NonPayableTransactionObject<string>;

    /**
     * calculates the address string representation of the signed address.
     * @param _addr address
     * @param _includeAddrChecksum bool. should the addressChecksum be used for this caluclation.
     */
    calculateAddressString(
      _addr: string,
      _includeAddrChecksum: boolean
    ): NonPayableTransactionObject<string>;

    /**
     * returns the hash for the provided claim target address.
     * @param _claimAddrChecksum bool target address was signed using the Ethereum checksum (EIP-55)
     * @param _claimToAddr address target address for the claim.
     */
    createClaimMessage(
      _claimToAddr: string,
      _claimAddrChecksum: boolean,
      _postfix: string | number[]
    ): NonPayableTransactionObject<string>;

    /**
     * returns the hash for the provided claim target address.
     * @param _claimAddrChecksum bool target address was signed using the Ethereum checksum (EIP-55)
     * @param _claimToAddr address target address for the claim.
     */
    getHashForClaimMessage(
      _claimToAddr: string,
      _claimAddrChecksum: boolean,
      _postfix: string | number[]
    ): NonPayableTransactionObject<string>;

    /**
     * returns the ethereum pseude address of a DMD signed message.
     * @param _claimAddrChecksum bool target address was signed using the Ethereum checksum (EIP-55)
     * @param _claimToAddr address target address for the claim.
     * @param _r bytes32 r component of the signature.
     * @param _s bytes32 s component of the signautre.
     * @param _v uint8 v component of the signature.
     */
    getEthAddressFromSignature(
      _claimToAddr: string,
      _claimAddrChecksum: boolean,
      _postfix: string | number[],
      _v: number | string | BN,
      _r: string | number[],
      _s: string | number[]
    ): NonPayableTransactionObject<string>;

    claimMessageMatchesSignature(
      _claimToAddr: string,
      _claimAddrChecksum: boolean,
      _postFix: string | number[],
      _pubKeyX: string | number[],
      _pubKeyY: string | number[],
      _v: number | string | BN,
      _r: string | number[],
      _s: string | number[]
    ): NonPayableTransactionObject<boolean>;

    getDilutionTimestamp1(): NonPayableTransactionObject<string>;

    getDilutionTimestamp2(): NonPayableTransactionObject<string>;

    getDilutionTimestamp3(): NonPayableTransactionObject<string>;

    /**
     * dilutes the entitlement after a certain time passed away and sends it to the beneficor (reinsert pot)
     */
    dilute1(): NonPayableTransactionObject<string>;

    /**
     * dilutes the entitlement after a certain time passed away and sends it to the beneficor (reinsert pot)
     */
    dilute2(): NonPayableTransactionObject<string>;

    /**
     * dilutes the entitlement after a certain time passed away and sends it to the beneficor (reinsert pot)
     */
    dilute3(): NonPayableTransactionObject<string>;

    getCurrentDilutedClaimFactor(): NonPayableTransactionObject<{
      nominator: string;
      denominator: string;
      0: string;
      1: string;
    }>;

    addBalance(oldAddress: string | number[]): PayableTransactionObject<void>;

    claim(
      _targetAdress: string,
      _claimAddrChecksum: boolean,
      _postfix: string | number[],
      _pubKeyX: string | number[],
      _pubKeyY: string | number[],
      _v: number | string | BN,
      _r: string | number[],
      _s: string | number[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Claim(cb?: Callback<Claim>): EventEmitter;
    Claim(options?: EventOptions, cb?: Callback<Claim>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Claim", cb: Callback<Claim>): void;
  once(event: "Claim", options: EventOptions, cb: Callback<Claim>): void;
}
